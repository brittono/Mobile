{"version":3,"sources":["js/lib/rotate3Di.js"],"names":["$","calcRotate3Di","direction","now","degrees","Math","floor","abs","scale","fx","step","rotate3Di","options","prevScale","elem","data","call","css","proxied","prototype","cur","this","prop","apply","arguments","fn","duration","extend","d","animate","jQuery"],"mappings":"CAAA,SAAWA,GASP,GAAIC,IACAC,UAAW,SAAUC,GAAM,MAAQA,GAAM,GAAK,EAAI,GAClDC,QAAS,SAAUD,GAAM,MAAQE,MAAKC,MAAMD,KAAKE,IAAIJ,IAAS,KAC9DK,MAAO,SAAUJ,GAAU,OAAQ,EAAKA,EAAU,IAAO,KAClBA,GAAW,KAAO,EAAI,IAIjEJ,GAAES,GAAGC,KAAKC,UAAY,SAAUF,GAK5B,GAJAP,UAAYD,EAAcC,UAAUO,EAAGN,KACvCC,QAAUH,EAAcG,QAAQK,EAAGN,KACnCK,MAAQP,EAAcO,MAAMJ,SAExBK,EAAGG,aAA8C,KAA5BH,EAAGG,QAAoB,WAAkB,CAC9D,GAAIH,EAAGG,QAAoB,WAAG,CAC1B,GAAIC,GAAYb,EAAES,EAAGK,MAAMC,KAAK,sBAM5BP,OAAQK,GAAa,IAGrBJ,EAAGG,QAAoB,WAAEI,KACrBP,EAAGK,KACFN,MAAQ,GAAKK,EAAY,GAW9Bb,EAAES,EAAGK,MAAMC,KACP,uBAC0C,EAA1Cf,EAAES,EAAGK,MAAMC,KAAK,yBAO5BP,MAAQH,KAAKE,IAAIC,OAQrBR,EAAES,EAAGK,MAAMC,KAAK,oBAAqBb,UAAYE,SACjDJ,EAAES,EAAGK,MAAMG,IACP,YACA,SAAWf,UAAYE,QAAU,cACfI,MAAQ,QAMlC,IAAIU,GAAUlB,EAAES,GAAGU,UAAUC,GAC7BpB,GAAES,GAAGU,UAAUC,IAAM,WACjB,MAAgB,aAAbC,KAAKC,KACGtB,EAAEqB,KAAKP,MAAMC,KAAK,sBAAwB,EAG9CG,EAAQK,MAAMF,KAAMG,YAG/BxB,EAAEyB,GAAGd,UAAY,SAAUP,EAASsB,EAAUd,GAuB1C,OAtBuB,KAAZc,IACPA,EAAW,GAGO,gBAAXd,GACPZ,EAAE2B,OAAOf,GAAUc,SAAUA,IAE7Bd,GAAWc,SAAUA,GAGV,UAAXtB,IAKIA,EADAJ,EAAEqB,MAAMN,KAAK,qBACH,SAGA,QAIH,QAAXX,EAAmB,CACnBJ,EAAEqB,MAAMN,KAAK,qBAAqB,EAElC,IAAIb,IAAa,CAEK,iBAAXU,IACJA,EAAmB,WACK,aAAxBA,EAAmB,YAEtBV,EAAY,GAGhBE,EAAsB,IAAZF,MAEQ,UAAXE,IACPJ,EAAEqB,MAAMN,KAAK,qBAAqB,GAElCX,EAAU,EAGd,IAAIwB,GAAI5B,EAAEqB,MAAMN,KAAK,sBAAwB,CAC7Cf,GAAEqB,MAAMN,KACJ,sBACAd,EAAcO,MAAMP,EAAcG,QAAQwB,KAE9C5B,EAAEqB,MAAMQ,SAASlB,UAAWP,GAAUQ,KAE3CkB","file":"rotate3Di.min.js","sourcesContent":["(function ($) {\n    // rotate3Di v0.9.2\n    // https://github.com/zachstronaut/rotate3Di\n    // 2012.10.04 - 2009.03.11 Zachary Johnson http://www.zachstronaut.com\n    // \"3D\" isometric rotation and animation using CSS3 transformations\n    // currently supported in Safari/Chrome/Webkit, Firefox 3.5+, IE 9+,\n    // and Opera 11+. Tested with jQuery 1.3.x through 1.7.2.\n    \n    \n    var calcRotate3Di = {\n        direction: function (now) {return (now < 0 ? -1 : 1);},\n        degrees: function (now) {return (Math.floor(Math.abs(now))) % 360;},\n        scale: function (degrees) {return (1 - (degrees % 180) / 90)\n                                            * (degrees >= 180 ? -1 : 1);}\n    }\n    \n    // Custom animator\n    $.fx.step.rotate3Di = function (fx) {\n        direction = calcRotate3Di.direction(fx.now);\n        degrees = calcRotate3Di.degrees(fx.now);\n        scale = calcRotate3Di.scale(degrees);\n\n        if (fx.options && typeof fx.options['sideChange'] != 'undefined') {\n            if (fx.options['sideChange']) {\n                var prevScale = $(fx.elem).data('rotate3Di.prevScale');\n                \n                // negative scale means back side\n                // positive scale means front side\n                // if one is pos and one is neg then we have changed sides\n                // (but one could actually be zero).\n                if (scale * prevScale <= 0) {\n                    // if one was zero, deduce from the other which way we are\n                    // flipping: to the front (pos) or to the back (neg)?\n                    fx.options['sideChange'].call(\n                        fx.elem,\n                        (scale > 0 || prevScale < 0)\n                    );\n                    // this was commented out to prevent calling it more than\n                    // once, but then that broke legitimate need to call it\n                    // more than once for rotations of 270+ degrees!\n                    //fx.options['sideChange'] = null;\n                    \n                    // this is my answer to commenting the above thing out...\n                    // if we just flipped sides, flip-flop the old previous\n                    // scale so that we can fire the sideChange event correctly\n                    // if we flip sides again.\n                    $(fx.elem).data(\n                        'rotate3Di.prevScale',\n                        $(fx.elem).data('rotate3Di.prevScale') * -1\n                    );\n                }\n            }\n\n            // Making scale positive before setting it prevents flip-side\n            // content from showing up mirrored/reversed.\n            scale = Math.abs(scale);\n        }\n\n        // Since knowing the current degrees is important for detecting side\n        // change, and since Firefox 3.0.x seems to not be able to reliably get\n        // a value for css('transform') the first time after the page is loaded\n        // with my flipbox demo... I am storing degrees someplace where I know\n        // I can get them.\n        $(fx.elem).data('rotate3Di.degrees', direction * degrees);\n        $(fx.elem).css(\n            'transform',\n            'skewY(' + direction * degrees + 'deg)'\n                + ' scale(' + scale + ', 1)'\n        );\n    }\n    \n    // fx.cur() must be monkey patched because otherwise it would always\n    // return 0 for current rotate3Di value\n    var proxied = $.fx.prototype.cur;\n    $.fx.prototype.cur = function () {\n        if(this.prop == 'rotate3Di') {\n            return $(this.elem).data('rotate3Di.degrees') || 0;\n        }\n        \n        return proxied.apply(this, arguments);\n    }\n    \n    $.fn.rotate3Di = function (degrees, duration, options) {\n        if (typeof duration == 'undefined') {\n            duration = 0;\n        }\n        \n        if (typeof options == 'object') {\n            $.extend(options, {duration: duration});\n        } else {\n            options = {duration: duration};\n        }\n        \n        if (degrees == 'toggle') {\n            // Yes, jQuery has the toggle() event but that's only good for\n            // clicks, and likewise hover() is only good for mouse in/out.\n            // What if you want to toggle based on a timer or something else?\n            if ($(this).data('rotate3Di.flipped')) {\n                degrees = 'unflip';\n                \n            } else {\n                degrees = 'flip';\n            }\n        }\n        \n        if (degrees == 'flip') {\n            $(this).data('rotate3Di.flipped', true);\n\n            var direction = -1;\n            if (\n                typeof options == 'object'\n                && options['direction']\n                && options['direction'] == 'clockwise'\n            ) {\n                direction = 1;\n            }\n            \n            degrees = direction * 180;\n            \n        } else if (degrees == 'unflip') {\n            $(this).data('rotate3Di.flipped', false);\n            \n            degrees = 0;\n        }\n        \n        var d = $(this).data('rotate3Di.degrees') || 0;\n        $(this).data(\n            'rotate3Di.prevScale',\n            calcRotate3Di.scale(calcRotate3Di.degrees(d))\n        );\n        $(this).animate({rotate3Di: degrees}, options);\n    }\n})(jQuery);\n"]}